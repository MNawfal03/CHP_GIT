import streamlit as st
import numpy as np
import matplotlib.pyplot as plt 

# Configuration de la page
st.set_page_config(
    page_title="R√©solution de l'√©quation de Boltzmann",
    page_icon="üìò",
    layout="wide"
)

# Titre principal (Page de garde)
st.title("R√©solution de l'√©quation de Boltzmann avec la m√©thode de Monte Carlo")
st.markdown("---")

# Menu de navigation
menu = ["Accueil", "Contexte de l'√©quation", "M√©thode Monte Carlo", "√âtudes de cas", "Conclusion"]
choix = st.sidebar.radio("Navigation", menu)

# Affichage des pages selon le choix
if choix == "Accueil":
    st.header("Bienvenue")
    st.write(
        "Bienvenue sur notre site d√©di√© √† la r√©solution de l'√©quation de Boltzmann lin√©aire avec la m√©thode de Monte Carlo."
    )
    st.write("Ce projet a √©t√© r√©alis√© par :")
    st.write("- **Ikram EL OUARDY**")
    st.write("- **Salma JEMLI**")
    st.write("- **Nawfal MAGHRAOUI**")
    st.write("- **Yassine AYOUN**")
    st.write("Encadr√© par : **Gael Poette**")
    
    # Centrage de l'image avec des colonnes
    col1, col2, col3 = st.columns([1, 2, 1])
    with col2:
        st.image("./CEA1.png", caption="Exemple d'application de la m√©thode Monte Carlo")

elif choix == "Contexte de l'√©quation":
    st.header("Contexte de l'√©quation")
    st.subheader("L'√©quation de Boltzmann lin√©aire")
    st.latex(r"""
    \partial_t u(x, t, v) + v \cdot \nabla u(x, t, v) = -\sigma_t(x, v) u(x, t, v) + \int \sigma_s(x, v, v') u(x, t, v') dv'
    """)
    st.write(
        "Cette √©quation d√©crit l'√©volution de la densit√© de particules $u(x, t, v)$ sous l'influence de diff√©rents ph√©nom√®nes tels que la collision et le transport."
    )

elif choix == "M√©thode Monte Carlo":
    st.header("M√©thode Monte Carlo")
    st.subheader("Introduction")
    st.write(
        "La m√©thode Monte Carlo est une approche stochastique permettant de r√©soudre des probl√®mes complexes, notamment les √©quations int√©grales, en simulant des processus al√©atoires."
    )
    
    # Centrer l'image avec des colonnes
    col1, col2, col3 = st.columns([1, 2, 1])
    with col2:
        st.image("https://via.placeholder.com/800x400", caption="Illustration de la m√©thode Monte Carlo pour estimer œÄ", use_container_width=True)
    
    # Exemple interactif pour estimer œÄ
    st.subheader("Estimation de œÄ")
    points = st.slider("Nombre de points √† g√©n√©rer", min_value=100, max_value=10000, step=1000, value=1000)
    
    x = np.random.rand(points)
    y = np.random.rand(points)
    inside = x**2 + y**2 <= 1
    
    fig, ax = plt.subplots(figsize=(5, 5))  # Taille r√©duite de la figure
    ax.scatter(x[inside], y[inside], color="blue", label="Inside")
    ax.scatter(x[~inside], y[~inside], color="red", label="Outside")
    ax.set_aspect('equal')
    ax.legend()
    
    # Centrer le graphique avec des colonnes
    col1, col2, col3 = st.columns([1, 2, 1])
    with col2:
        st.pyplot(fig, use_container_width=True)
    
    pi_estimation = 4 * np.sum(inside) / points
    st.write(f"Valeur estim√©e de œÄ : {pi_estimation:.4f}")

elif choix == "√âtudes de cas":
    st.header("√âtudes de cas")
    st.subheader("Advection")
    st.write("Description de l'advection avec r√©sultats num√©riques.")
    st.subheader("Absorption et transport")
    st.write("Description de l'absorption et du transport avec visualisations.")
    st.subheader("Limite de diffusion")
    st.write("Pr√©sentation des r√©sultats obtenus en utilisant la m√©thode Monte Carlo pour la diffusion.")

elif choix == "Conclusion":
    st.header("Conclusion")
    st.write(
        "La m√©thode Monte Carlo a prouv√© son efficacit√© dans la r√©solution de l'√©quation de Boltzmann lin√©aire. Elle permet de traiter des probl√®mes √† haute dimension avec flexibilit√©."
    )
    st.write(
        "**Perspectives** : √âtendre cette m√©thode √† des simulations 3D et explorer des sc√©narios plus complexes."
    )

# Footer
st.markdown("---")
st.write("Projet acad√©mique - Janvier 2025")
